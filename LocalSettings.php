<?php
# This file was automatically generated by the MediaWiki 1.29.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "default";
$wgMetaNamespace = "Policy";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://46.101.178.60";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo = "$wgResourceBasePath/resources/assets/wiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "apache@46.101.178.60";
$wgPasswordSender = "apache@46.101.178.60";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "mw_default";
$wgDBuser = "root";
$wgDBpassword = "farmpassword";

# MySQL specific settings
$wgDBprefix = "mw_";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "0b0e54cff7e1d129256ea68c8b75b3acc69382845de089d0ef407a1f267c4fa2";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "a3bd1fa55304a11e";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'CologneBlue' );
wfLoadSkin( 'Modern' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Vector' );


# End of automatically generated settings.
# Add more configuration options below.

# From: https://www.mediawiki.org/wiki/Manual:Wiki_family#Basic_principles
if ( defined( 'MW_DB' ) ) {
    // Set $wikiId from the defined constant 'MW_DB' that is set by maintenance scripts.
    $wikiId = MW_DB;
} elseif (isset($_SERVER['REQUEST_URI'])) {
    $items = explode('/', $_SERVER['REQUEST_URI']);
    $wikiId = $items[1];
} else {
    // Fail gracefully if no value was set to the $wikiId variable, i.e. if no wiki was determined
    die( 'It was not possible to determine the wiki ID.' );
}

$wgScriptPath = '/'.$wikiId;
$wgArticlePath = '/'.$wikiId.'/$1';
$wgDBname = 'mw_'.$wikiId;
$wgCacheDirectory = "/tmp/mediawiki_".$wikiId."_cache";
$wgUploadDirectory = "$IP/images/$wikiId";
$wgUploadPath = "/images/$wikiId";
$wgSitename = $wikiId;

# From: https://www.mediawiki.org/wiki/Manual:Preventing_access#Simple_private_wiki
# Disable reading by anonymous users
$wgGroupPermissions['*']['read'] = false;

# But allow them to access the login page or else there will be no way to log in!
# (You also might want to add access to "Main Page", "Help:Contents", etc.)
$wgWhitelistRead = array ("Special:Userlogin");

# Disable anonymous editing
$wgGroupPermissions['*']['edit'] = false;

# Prevent new user registrations except by sysops
$wgGroupPermissions['*']['createaccount'] = false;


$conn = new mysqli($wgDBserver, $wgDBuser, $wgDBpassword);
if ($conn->connect_errno) {
    die("Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error);
}
if (empty($conn->query("SHOW DATABASES LIKE '$wgDBname' ")->fetch_assoc())){
    $sql = file_get_contents('farmconfig/default.sql');
    if (!$sql) {
        die("Unable to read default sql");
    }
    if (!$conn->query("CREATE DATABASE $wgDBname")) {
        die("Unable to create database: " . $conn->error);
    }
    if (!$conn->query("USE $wgDBname")) {
        die("Unable to select database: " . $conn->error);
    }
    if (!$conn->multi_query($sql)) {
        die("Unable to populate database: " . $conn->error);
    }
    $conn->close();
    sleep(3); // To get past mysql session async table create...
}

$wgShowExceptionDetails = true;
$wgShowDBErrorBacktrace = true;
